{"ast":null,"code":"var _jsxFileName = \"/Users/hammad/web-development/react/react-hooks/use-effect/src/ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from 'react';\n\nconst ImageToggleOnScroll = ({\n  primary,\n  secondary\n}) => {\n  const imgRef = useRef(null);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  });\n\n  const isInView = () => {\n    if (imgRef.current) {\n      const rect = imgRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  const {\n    0: inView,\n    1: setInView\n  } = useState(isInView());\n\n  const scrollHandler = () => {\n    setInView(() => {\n      return isInView();\n    });\n  };\n\n  return __jsx(\"img\", {\n    src: inView ? secondary : primary,\n    alt: \"\",\n    ref: imgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  });\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["/Users/hammad/web-development/react/react-hooks/use-effect/src/ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageToggleOnScroll","primary","secondary","imgRef","window","addEventListener","scrollHandler","removeEventListener","isInView","current","rect","getBoundingClientRect","top","bottom","innerHeight","inView","setInView"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAD,KAA0B;AAElD,QAAOC,MAAM,GAAGN,MAAM,CAAC,IAAD,CAAtB;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAiCC,aAAjC;AACA,WACI,MAAM;AACFF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAoCD,aAApC;AACH,KAHL;AAKH,GAPQ,CAAT;;AASA,QAAME,QAAQ,GAAG,MAAM;AACnB,QAAGL,MAAM,CAACM,OAAV,EAAkB;AACd,YAAMC,IAAI,GAAGP,MAAM,CAACM,OAAP,CAAeE,qBAAf,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeT,MAAM,CAACU,WAA9C;AACH;;AACD,WAAO,KAAP;AACH,GAND;;AAQA,QAAK;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBjB,QAAQ,CAACS,QAAQ,EAAT,CAAnC;;AAGA,QAAMF,aAAa,GAAG,MAAM;AACxBU,IAAAA,SAAS,CAAC,MAAM;AAAC,aAAOR,QAAQ,EAAf;AAAkB,KAA1B,CAAT;AACH,GAFD;;AAGA,SACI;AAAK,IAAA,GAAG,EAAEO,MAAM,GAAGb,SAAH,GAAaD,OAA7B;AACA,IAAA,GAAG,EAAC,EADJ;AAEA,IAAA,GAAG,EAAEE,MAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAKH,CA/BD;;AAiCA,eAAeH,mBAAf","sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\n\nconst ImageToggleOnScroll = ({primary, secondary}) => {\n\n    const  imgRef = useRef(null);\n    useEffect(() => {\n        window.addEventListener(\"scroll\",scrollHandler);\n        return (\n            () => {\n                window.removeEventListener(\"scroll\",scrollHandler);\n            }\n        )\n    })\n    \n    const isInView = () => {\n        if(imgRef.current){\n            const rect = imgRef.current.getBoundingClientRect();\n            return rect.top >= 0 && rect.bottom <= window.innerHeight; \n        }\n        return false;\n    };\n    \n    const[inView, setInView] = useState(isInView());\n    \n\n    const scrollHandler = () => {\n        setInView(() => {return isInView()})\n    }\n    return (\n        <img src={inView ? secondary:primary} \n        alt=\"\"\n        ref={imgRef}/>\n    );\n}\n\nexport default ImageToggleOnScroll;"]},"metadata":{},"sourceType":"module"}