{"ast":null,"code":"var _jsxFileName = \"/Users/hammad/web-development/react/react-hooks/use-effect/src/ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from 'react';\n\nconst ImageToggleOnScroll = ({\n  primary,\n  secondary\n}) => {\n  const imgRef = useRef(null);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView(isInView());\n    setIsLoading(false);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, [isLoading]);\n\n  const isInView = () => {\n    if (imgRef.current) {\n      const rect = imgRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  const {\n    0: inView,\n    1: setInView\n  } = useState(isInView());\n\n  const scrollHandler = () => {\n    setInView(() => {\n      return isInView();\n    });\n  };\n\n  return isLoading ? null : __jsx(\"img\", {\n    src: inView ? secondary : primary,\n    alt: \"\",\n    ref: imgRef,\n    width: \"200\",\n    height: \"200\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  });\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["/Users/hammad/web-development/react/react-hooks/use-effect/src/ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageToggleOnScroll","primary","secondary","imgRef","isLoading","setIsLoading","window","addEventListener","scrollHandler","setInView","isInView","removeEventListener","current","rect","getBoundingClientRect","top","bottom","innerHeight","inView"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAD,KAA0B;AAElD,QAAMC,MAAM,GAAGN,MAAM,CAAC,IAAD,CAArB;AACA,QAAM;AAAA,OAACO,SAAD;AAAA,OAAYC;AAAZ,MAA4BN,QAAQ,CAAC,IAAD,CAA1C;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAiCC,aAAjC;AACAC,IAAAA,SAAS,CAACC,QAAQ,EAAT,CAAT;AACAL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WACI,MAAM;AACFC,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAoCH,aAApC;AACH,KAHL;AAIH,GARQ,EAQP,CAACJ,SAAD,CARO,CAAT;;AAUA,QAAMM,QAAQ,GAAG,MAAM;AACnB,QAAGP,MAAM,CAACS,OAAV,EAAkB;AACd,YAAMC,IAAI,GAAGV,MAAM,CAACS,OAAP,CAAeE,qBAAf,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeV,MAAM,CAACW,WAA9C;AACH;;AACD,WAAO,KAAP;AACH,GAND;;AAQA,QAAK;AAAA,OAACC,MAAD;AAAA,OAAST;AAAT,MAAsBV,QAAQ,CAACW,QAAQ,EAAT,CAAnC;;AAGA,QAAMF,aAAa,GAAG,MAAM;AACxBC,IAAAA,SAAS,CAAC,MAAM;AAAC,aAAOC,QAAQ,EAAf;AAAkB,KAA1B,CAAT;AACH,GAFD;;AAGA,SAAON,SAAS,GAAG,IAAH,GACZ;AAAK,IAAA,GAAG,EAAEc,MAAM,GAAGhB,SAAH,GAAaD,OAA7B;AACA,IAAA,GAAG,EAAC,EADJ;AAEA,IAAA,GAAG,EAAEE,MAFL;AAGA,IAAA,KAAK,EAAC,KAHN;AAIA,IAAA,MAAM,EAAC,KAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAOH,CAnCD;;AAqCA,eAAeH,mBAAf","sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\n\nconst ImageToggleOnScroll = ({primary, secondary}) => {\n\n    const imgRef = useRef(null);\n    const [isLoading, setIsLoading] = useState(true)\n    useEffect(() => {\n        window.addEventListener(\"scroll\",scrollHandler);\n        setInView(isInView())\n        setIsLoading(false);\n        return (\n            () => {\n                window.removeEventListener(\"scroll\",scrollHandler);\n            });\n    },[isLoading]);\n    \n    const isInView = () => {\n        if(imgRef.current){\n            const rect = imgRef.current.getBoundingClientRect();\n            return rect.top >= 0 && rect.bottom <= window.innerHeight; \n        }\n        return false;\n    };\n\n    const[inView, setInView] = useState(isInView());\n    \n\n    const scrollHandler = () => {\n        setInView(() => {return isInView()})\n    }\n    return isLoading ? null : (\n        <img src={inView ? secondary:primary} \n        alt=\"\"\n        ref={imgRef}\n        width=\"200\"\n        height=\"200\"/>\n    );\n}\n\nexport default ImageToggleOnScroll;"]},"metadata":{},"sourceType":"module"}